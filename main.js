// Generated by CoffeeScript 1.10.0
(function() {
  var Cell, Condition, Down, Game, Go, InvokeItems, Item, Left, Player, Right, Unlock, Up, appendAlert, assets, editor, game, generateCommand, obj2dir, onimageload, showAOError, showText, valueFromImmidiatelyOrLazy;

  Function.prototype.property = function(prop, desc) {
    return Object.defineProperty(this.prototype, prop, desc);
  };

  generateCommand = function(commandName) {
    return function(dir) {
      return {
        name: commandName,
        direction: dir,
        toString: function() {
          return commandName + "(" + this.direction.name + ")";
        }
      };
    };
  };

  Go = generateCommand('Go');

  Unlock = generateCommand('Unlock');

  InvokeItems = function(func) {
    return {
      name: 'InvokeItems',
      func: func,
      toString: function() {
        return this.name;
      }
    };
  };

  Up = {
    name: 'Up',
    delta: {
      x: 0,
      y: -1
    }
  };

  Down = {
    name: 'Down',
    delta: {
      x: 0,
      y: 1
    }
  };

  Left = {
    name: 'Left',
    delta: {
      x: -1,
      y: 0
    }
  };

  Right = {
    name: 'Right',
    delta: {
      x: 1,
      y: 0
    }
  };

  obj2dir = function(obj) {
    switch (obj.name) {
      case 'Up':
        return Up;
      case 'Down':
        return Down;
      case 'Left':
        return Left;
      case 'Right':
        return Right;
      default:
        throw "unknown obj: " + (JSON.stringify(obj));
    }
  };

  appendAlert = function(type, text) {
    var $alert;
    $alert = $('#alert-template').clone().attr({
      id: ''
    }).addClass("alert-" + type).append(text);
    $('#alerts').append($alert);
    return $alert.fadeIn('slow');
  };

  showAOError = function(e) {
    var message;
    message = e.name === 'SyntaxError' ? (editor.gotoLine(e.line, e.column, true), "文法エラー (" + e.line + "行 " + e.column + "列) 期待していない識別子\"" + e.found + "\"") : e.location != null ? (editor.gotoLine(e.location.line, e.location.column, true), "エラー (" + e.location.line + "行 " + e.location.column + "列) " + (e.toString())) : e.toString();
    return appendAlert('danger', message);
  };

  showText = function(stageIndex) {
    if (stageIndex > game.currentStageIndex) {
      appendAlert('danger', "クリアしていないステージの説明は見ることができません");
      return;
    }
    if (stageIndex === game.currentStageIndex) {
      $('#hint-btn').show();
    } else {
      $('#hint-btn').hide();
    }
    $('#text-nav li').removeClass('active');
    $("#text-nav li:nth-child(" + (stageIndex + 1) + ")").addClass('active');
    return $("#text").html($("#md-text" + stageIndex).html());
  };

  Condition = (function() {
    function Condition() {}

    Condition.Require = (function() {
      function Require(requiredItems, noParticularOrder) {
        this.requiredItems = requiredItems;
        this.noParticularOrder = noParticularOrder != null ? noParticularOrder : true;
      }

      Require.prototype.check = function(items) {
        var a, b, greater;
        if (!_.every(items, function(item) {
          return item instanceof Item;
        })) {
          return false;
        }
        a = items.map(function(item) {
          return item.value;
        });
        b = this.requiredItems;
        if (this.noParticularOrder) {
          greater = function(x, y) {
            if (a < b) {
              return -1;
            } else if (a > b) {
              return 1;
            } else {
              return 0;
            }
          };
          a = a.sort(greater);
          b = b.sort(greater);
        }
        return JSON.stringify(a) === JSON.stringify(b);
      };

      Require.prototype.toString = function() {
        return (this.requiredItems.join(", ")) + "が必要\n順不同: " + (this.noParticularOrder ? 'はい' : 'いいえ');
      };

      return Require;

    })();

    Condition.Test = (function() {
      function Test(opts) {
        this.input = opts.input, this.output = opts.output, this.inputText = opts.inputText, this.outputText = opts.outputText;
      }

      Test.prototype.check = function(items) {
        var e, error, val;
        val = null;
        try {
          val = _.reduce(items, function(args, item) {
            return aoscript.applyFunction(item, args.map(aoscript.obj2ao)).toObject();
          }, this.input);
          appendAlert('info', "入力" + this.input + "に対して出力が" + this.output + "となるかテスト");
          appendAlert('info', "出力" + val);
          return _.isEqual(val, this.output);
        } catch (error) {
          e = error;
          showAOError(e);
          return false;
        }
      };

      Test.prototype.toString = function() {
        return "入力" + (this.inputText || this.input.join(', ')) + "に対して" + (this.outputText || this.output) + "を出力";
      };

      return Test;

    })();

    Condition.requires = function() {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Condition.Require, arguments, function(){});
    };

    Condition.test = function() {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Condition.Test, arguments, function(){});
    };

    return Condition;

  })();

  valueFromImmidiatelyOrLazy = function(val) {
    if (typeof val === 'function') {
      return val();
    } else {
      return _.clone(val);
    }
  };

  Cell = (function() {
    function Cell(type1, x1, y1, note) {
      this.type = type1;
      this.x = x1;
      this.y = y1;
      this.note = note;
    }

    return Cell;

  })();

  Item = (function() {
    function Item(obj) {
      this.x = obj.x;
      this.y = obj.y;
      this.value = obj.value;
    }

    Item.prototype.toString = function() {
      return this.value + " :: " + (typeof this.value);
    };

    return Item;

  })();

  Player = (function() {
    function Player(opts) {
      this.x = opts.x;
      this.y = opts.y;
      this.items = opts.items || [];
      this.direction = Up;
      this.updateItemList();
    }

    Player.prototype.addItem = function(item) {
      this.items.push(item);
      return this.updateItemList();
    };

    Player.prototype.updateItemList = function() {
      return $('#items').text(this.items.map(function(item) {
        return item.toString();
      }).join(', '));
    };

    return Player;

  })();

  Game = (function() {
    function Game() {}

    Game.prototype.initialize = function(initialStageIndex) {
      this.currentStageIndex = initialStageIndex;
      this.repeat = 0;
      this.stages = [
        {
          field: {
            width: 9,
            height: 9
          },
          player: {
            x: 4,
            y: 6
          },
          goal: {
            x: 4,
            y: 2
          }
        }, {
          field: ["         ", "         ", "   ###   ", "   #G#   ", "   # #   ", "    P    ", "         ", "         ", "         "],
          walls: [
            {
              x: 4,
              y: 4,
              condition: function() {
                var fact, n;
                n = _.random(0, 10);
                fact = function(a) {
                  if (a === 0) {
                    return 1;
                  } else {
                    return a * fact(a - 1);
                  }
                };
                return Condition.test({
                  input: [n],
                  output: fact(n),
                  inputText: 'n',
                  outputText: 'n!'
                });
              }
            }
          ]
        }, {
          field: ["         ", "         ", "   ###   ", "   #G#   ", "   # #   ", "    P    ", "         ", "         ", "         "],
          walls: [
            {
              x: 4,
              y: 4,
              condition: function() {
                var a, b, c;
                a = _.random(0, 10);
                b = _.random(0, 10);
                c = _.random(0, 10);
                return Condition.test({
                  input: [aoscript.Tuple.fromObject([a, b, c])],
                  output: a + b + c,
                  inputText: '(a, b, c)',
                  outputText: 'a + b + c'
                });
              }
            }
          ]
        }, {
          field: ["   # #   ", "   # #   ", "   # #   ", "   # #   ", "   # #   ", "   # #   ", "   # #   ", "   #P#   ", "    #    "],
          goal: function() {
            return {
              x: 4,
              y: _.random(0, 4),
              note: 'y座標はランダム'
            };
          },
          repeat: 1
        }, {
          field: ["         ", "         ", "   ###   ", "   #G#   ", "   # #   ", "    P    ", "         ", "         ", "         "],
          walls: [
            {
              x: 4,
              y: 4,
              condition: function() {
                var a, ary, b, c;
                a = _.random(0, 10);
                b = _.random(0, 10);
                c = _.random(0, 10);
                ary = [a, b, c];
                return Condition.test({
                  input: [aoscript.Cons.fromObject(ary)],
                  output: ary.map(function(e) {
                    return e * 2;
                  }),
                  inputText: '[a, b, c]',
                  outputText: '[a*2, b*2, c*2]'
                });
              }
            }
          ]
        }, {
          field: ["   #     ", "   #     ", "   #     ", "   #     ", "   #     ", "   # #   ", "   # #   ", "   #P#   ", "    #    "],
          goal: function() {
            return {
              x: 6,
              y: _.random(0, 4),
              note: 'y座標はランダム'
            };
          },
          repeat: 1
        }, {
          field: {
            width: 9,
            height: 9
          },
          player: {
            x: 4,
            y: 6
          },
          goal: function() {
            return {
              x: _.random(0, 8),
              y: _.random(0, 4),
              note: 'x, y座標ともにランダム'
            };
          },
          repeat: 1
        }
      ];
      return game.setupStage(this.currentStageIndex);
    };

    Game.prototype.setupStage = function(stageIndex, opts) {
      var cell, fieldIsArray, fun, goalPos, item, j, k, l, len, len1, len2, m, o, ref, ref1, ref2, ref3, ref4, stage, wall, x, y;
      opts = $.extend(true, {}, {
        setRepeat: true
      }, opts);
      this.player = null;
      this.goal = null;
      this.field = null;
      stage = this.stages[stageIndex];
      fieldIsArray = Object.prototype.toString.call(stage.field) === '[object Array]';
      this.height = fieldIsArray ? stage.field.length : stage.field.height;
      this.field = new Array(this.height);
      for (y = j = 0, ref = this.height; 0 <= ref ? j < ref : j > ref; y = 0 <= ref ? ++j : --j) {
        this.width = fieldIsArray ? stage.field[y].length : stage.field.width;
        this.field[y] = new Array(this.width);
        for (x = k = 0, ref1 = this.width; 0 <= ref1 ? k < ref1 : k > ref1; x = 0 <= ref1 ? ++k : --k) {
          if (fieldIsArray) {
            this.field[y][x] = (function() {
              switch (stage.field[y][x]) {
                case ' ':
                  return new Cell('floor', x, y);
                case 'G':
                  return this.goal = new Cell('goal', x, y);
                case 'P':
                  this.player = new Player({
                    x: x,
                    y: y
                  });
                  return new Cell('floor', x, y);
                case '#':
                  return new Cell('wall', x, y);
              }
            }).call(this);
          } else {
            this.field[y][x] = new Cell('floor', x, y);
          }
        }
      }
      this.field.items = [];
      if (stage.player != null) {
        this.player = new Player(valueFromImmidiatelyOrLazy(stage.player));
      }
      if (stage.goal != null) {
        goalPos = valueFromImmidiatelyOrLazy(stage.goal);
        this.goal = this.field[goalPos.y][goalPos.x] = new Cell('goal', goalPos.x, goalPos.y, goalPos.note);
      }
      if (stage.items != null) {
        ref2 = stage.items;
        for (l = 0, len = ref2.length; l < len; l++) {
          item = ref2[l];
          item = valueFromImmidiatelyOrLazy(item);
          this.field.items.push(new Item(item));
        }
      }
      if (stage.funcs != null) {
        ref3 = stage.funcs;
        for (m = 0, len1 = ref3.length; m < len1; m++) {
          fun = ref3[m];
          fun = valueFromImmidiatelyOrLazy(fun);
          this.field.items.push(new Item(fun));
        }
      }
      if (stage.walls != null) {
        ref4 = stage.walls;
        for (o = 0, len2 = ref4.length; o < len2; o++) {
          wall = ref4[o];
          wall = valueFromImmidiatelyOrLazy(wall);
          cell = new Cell('wall', wall.x, wall.y);
          cell.condition = valueFromImmidiatelyOrLazy(wall.condition);
          this.field[wall.y][wall.x] = cell;
        }
      }
      if (opts.setRepeat && (stage.repeat != null)) {
        this.repeat = stage.repeat;
      }
      $('#stage-num').text(stageIndex + 1);
      return showText(stageIndex);
    };

    Game.property('repeat', {
      get: function() {
        return this._repeat;
      },
      set: function(rep) {
        this._repeat = rep;
        if (this._repeat > 0) {
          return $('#loop-num').text("loop " + this._repeat);
        }
      }
    });

    Game.prototype.isCleared = function() {
      if (this.isAllCleared()) {
        return false;
      }
      return this.field[this.player.y][this.player.x].type === 'goal';
    };

    Game.prototype.isAllCleared = function() {
      return this.currentStageIndex >= this.stages.length;
    };

    Game.prototype.goToNextStage = function() {
      this.currentStageIndex = Math.min(this.currentStageIndex + 1, this.stages.length);
      if (this.currentStageIndex < this.stages.length) {
        return this.setupStage(this.currentStageIndex);
      }
    };

    Game.prototype.executeCommand = function(command) {
      var dir, e, error, isSamePosition, item, items, tx, ty, wall, x, y;
      dir = null;
      switch (command.name) {
        case 'Go':
          dir = obj2dir(command.values[0]);
          tx = this.player.x + dir.delta.x;
          ty = this.player.y + dir.delta.y;
          if (!this.isInField(tx, ty)) {
            return;
          }
          if (this.field[ty][tx].type === 'wall') {
            return;
          }
          this.player.x = tx;
          this.player.y = ty;
          break;
        case 'Unlock':
          dir = obj2dir(command.values[0]);
          x = this.player.x + dir.delta.x;
          y = this.player.y + dir.delta.y;
          if (this.field[y][x].condition == null) {
            return;
          }
          wall = this.field[y][x];
          if (wall.condition.check(this.player.items)) {
            this.field[y][x] = new Cell('floor', wall.x, wall.y);
          } else {
            appendAlert('danger', 'Unlock失敗');
          }
          break;
        case 'InvokeItems':
          try {
            items = aoscript.applyFunction(command.values[0], [
              aoscript.Cons.fromObject(this.player.items.map(function(i) {
                return i.value;
              }))
            ]).toArray();
            this.player.items = items.map(function(i) {
              return new Item(i);
            });
            this.player.updateItemList();
          } catch (error) {
            e = error;
            alert(e);
          }
          break;
        case 'AddItem':
          this.player.addItem(command.values[0]);
      }
      if (dir != null) {
        this.player.direction = dir;
      }
      isSamePosition = (function(_this) {
        return function(item) {
          return item.x === _this.player.x && item.y === _this.player.y;
        };
      })(this);
      item = _.find(this.field.items, isSamePosition);
      if (item !== void 0) {
        this.field.items = _.reject(this.field.items, isSamePosition);
        return this.player.addItem(item);
      }
    };

    Game.prototype.getCurrentStage = function() {
      return this.stages[this.currentStageIndex];
    };

    Game.prototype.isFinalStage = function() {
      return this.currentStageIndex >= this.stages.length - 1 && this.repeat === 0;
    };

    Game.prototype.isInField = function(x, y) {
      return (0 <= x && x < this.width) && (0 <= y && y < this.height);
    };

    return Game;

  })();

  game = new Game;

  editor = null;

  assets = {
    imagePaths: {
      player: 'images/player.png',
      item: 'images/item.png',
      field: 'images/field.png'
    },
    loadImages: function(onload) {
      var generateNextImageLoader, keys;
      this.images = {};
      keys = Object.keys(this.imagePaths);
      generateNextImageLoader = (function(_this) {
        return function(index) {
          if (index >= keys.length) {
            return onimageload;
          } else {
            console.log("loading " + (index + 1) + "/" + keys.length + " image...");
            return function() {
              var img;
              img = new Image;
              img.src = _this.imagePaths[keys[index]];
              _this.images[keys[index]] = img;
              return img.onload = generateNextImageLoader(index + 1);
            };
          }
        };
      })(this);
      return generateNextImageLoader(0)();
    }
  };

  onimageload = function() {
    var CELL_SIZE, canvas, clearAlerts, code, commands, draw, executeCode, firstRun, frameCount, i, initialStageIndex, j, li, mouse, prevShowTooltip, ref, replCode, saveFile, session, showTooltip, updateFileList, updateRestCommands;
    saveFile = function(fileName) {
      var fileList;
      if (fileName === '') {
        alert('file name is needed');
        return;
      }
      localStorage.setItem("file-" + fileName, editor.getValue());
      fileList = JSON.parse(localStorage.getItem('filelist') || "[]");
      if (fileList.indexOf(fileName) === -1) {
        fileList.push(fileName);
      }
      localStorage.setItem('filelist', JSON.stringify(fileList));
      updateFileList();
      return appendAlert('info', fileName + "をセーブしました!");
    };
    editor = ace.edit('editor');
    editor.setFontSize(20);
    session = editor.getSession();
    session.setMode('ace/mode/scala');
    session.setTabSize(2);
    session.setUseWrapMode(true);
    if (code = localStorage.getItem('code')) {
      editor.setValue(code);
    }
    replCode = '';
    $('#repl-console').console({
      promptLabel: '> ',
      commandValidate: function(line) {
        return line !== '';
      },
      commandHandle: function(line) {
        var e, env, error, exec;
        code = replCode + "\n" + line;
        env = new aoscript.Environment(null);
        exec = function() {
          var result;
          result = aoscript["eval"](code, env, {
            allowReassignValue: true
          });
          replCode = code;
          if (result === null) {
            return "bind value";
          } else {
            return result.toString();
          }
        };
        try {
          return exec();
        } catch (error) {
          e = error;
          return e.toString();
        }
      },
      autofocus: true,
      animateScroll: true,
      promptHistory: true,
      charInsertTrigger: function(code, line) {
        return true;
      }
    });
    aoscript.onprint = function(val) {
      return appendAlert('info', val);
    };
    canvas = $('#canvas').get(0);
    if (!(canvas != null ? canvas.getContext : void 0)) {
      alert('canvas未対応');
      return;
    }
    CELL_SIZE = 50;
    commands = [];
    updateRestCommands = function(commands) {
      var command, j, len, results;
      $('#rest-commands').empty();
      results = [];
      for (j = 0, len = commands.length; j < len; j++) {
        command = commands[j];
        results.push($('#rest-commands').append($('<span>').addClass('label label-primary').text(command.toString())).append('&nbsp;'));
      }
      return results;
    };
    updateFileList = function() {
      var file, fileList, j, len, results;
      $('#file-list > option').remove();
      fileList = JSON.parse(localStorage.getItem('filelist') || '[]');
      results = [];
      for (j = 0, len = fileList.length; j < len; j++) {
        file = fileList[j];
        results.push($('#file-list').append($('<option>').html(file).val(file)));
      }
      return results;
    };
    clearAlerts = function() {
      return $('#alerts>div').remove();
    };
    updateFileList();
    initialStageIndex = 0;
    (function() {
      var currentStageIndex;
      currentStageIndex = localStorage.getItem('currentStage');
      if (currentStageIndex) {
        return initialStageIndex = parseInt(currentStageIndex);
      }
    })();
    (function() {
      var name, ref, val;
      ref = window.location.search.substring(1).split('='), name = ref[0], val = ref[1];
      if (name === 'stage') {
        return initialStageIndex = parseInt(val) - 1;
      }
    })();
    game.initialize(initialStageIndex);
    for (i = j = 0, ref = game.stages.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      li = $('<li>').append($('<a href="#">').text("Stage " + (i + 1)).click((function(i) {
        return function() {
          showText(i);
          return false;
        };
      })(i)));
      $('#text-nav').append(li);
    }
    showText(initialStageIndex);
    $('#hint-btn').click(function() {
      var $modalContent;
      $modalContent = $('#hint-modal>div>div');
      $modalContent.children('div.modal-header').children('h1').text("Stage " + (game.currentStageIndex + 1) + "のヒント");
      $modalContent.children('div.modal-body').html($("#hint" + game.currentStageIndex).html());
      return $('#hint-modal').modal();
    });
    if (sessionStorage.getItem('showed-readme') === null) {
      $('#readme-modal').modal();
      sessionStorage.setItem('showed-readme', 'true');
    }
    firstRun = true;
    mouse = {
      x: 0,
      y: 0,
      canvasRect: {
        top: 0,
        left: 0
      }
    };
    code = null;
    executeCode = function() {
      var aStar, args, bfs, dfs, e, env, error, getCommands, goto, repeat;
      repeat = function(time, val) {
        return _.times(time, function() {
          return val;
        });
      };
      dfs = function(x, y, px, py, history, command) {
        var dir, k, len, ref1, ret, tx, ty;
        if (x === px && y === py) {
          return command;
        }
        ret = [];
        ref1 = [Up, Down, Right, Left];
        for (k = 0, len = ref1.length; k < len; k++) {
          dir = ref1[k];
          tx = px + dir.delta.x;
          ty = py + dir.delta.y;
          if (game.isInField(tx, ty) && game.field[ty][tx].type !== 'wall' && _.find(history, function(pos) {
            return pos[0] === tx && pos[1] === ty;
          }) === void 0) {
            ret.push(dfs(x, y, tx, ty, history.concat([[px, py]]), command.concat([Go(dir)])));
          }
        }
        ret = _.reject(ret, _.isNull);
        if (_.isEmpty(ret)) {
          return null;
        } else {
          return _.min(ret, function(comm) {
            return comm.length;
          });
        }
      };
      bfs = function(x, y, px, py) {
        var command, cur, dir, history, k, len, que, ref1, routes, tx, ty;
        que = [[px, py, [], []]];
        routes = [];
        while (que.length > 0 && routes.length < 10) {
          cur = que.pop();
          if (cur[0] === x && cur[1] === y) {
            routes.push(cur[3]);
            continue;
          }
          ref1 = [Up, Down, Right, Left];
          for (k = 0, len = ref1.length; k < len; k++) {
            dir = ref1[k];
            tx = cur[0] + dir.delta.x;
            ty = cur[1] + dir.delta.y;
            history = cur[2];
            command = cur[3];
            if (game.isInField(tx, ty) && game.field[ty][tx].type !== 'wall' && _.find(history, function(pos) {
              return pos[0] === tx && pos[1] === ty;
            }) === void 0) {
              que.push([tx, ty, history.concat([[cur[0], cur[1]]]), command.concat([Go(dir)])]);
            }
          }
        }
        if (_.isEmpty(routes)) {
          return [];
        } else {
          return _.min(routes, function(route) {
            return route.length;
          });
        }
      };
      aStar = function(x, y, px, py) {
        var closeList, cur, dir, field, getPath, k, len, minIdx, openList, ref1, ret, startNode, to, tx, ty;
        field = game.field.concat().map(function(row) {
          return row.map(function(cell) {
            return {
              x: cell.x,
              y: cell.y,
              parent: null,
              state: 'none',
              dir: null
            };
          });
        });
        startNode = field[py][px];
        startNode.realCost = 0;
        startNode.presumeCost = Math.abs(px - x) + Math.abs(py - y);
        startNode.score = startNode.realCost + startNode.presumeCost;
        openList = [startNode];
        closeList = [];
        while (true) {
          minIdx = _.reduce(openList, function(min, node, cur) {
            if (node.score < openList[min].score) {
              return cur;
            } else {
              return min;
            }
          }, 0);
          cur = openList[minIdx];
          openList = _.reject(openList, function(n, i) {
            return i === minIdx;
          });
          if (cur === void 0) {
            break;
          }
          if (cur.x === x && cur.y === y) {
            break;
          }
          ref1 = [Up, Down, Right, Left];
          for (k = 0, len = ref1.length; k < len; k++) {
            dir = ref1[k];
            tx = cur.x + dir.delta.x;
            ty = cur.y + dir.delta.y;
            if (!game.isInField(tx, ty)) {
              continue;
            }
            to = field[ty][tx];
            if (to.state !== 'none' || to.type === 'wall') {
              continue;
            }
            to.state = 'open';
            to.realCost = cur.realCost + 1;
            to.presumeCost = Math.abs(to.x - x) + Math.abs(to.y - y);
            to.score = to.realCost + to.presumeCost;
            to.parent = cur;
            to.dir = Go(dir);
            openList.push(to);
          }
          cur.state = 'close';
          if (openList.length === 0) {
            return [];
          }
        }
        ret = [];
        getPath = function(node) {
          if (node.parent === null) {
            return [];
          } else {
            return getPath(node.parent).concat([node.dir]);
          }
        };
        return getPath(field[y][x]);
      };
      goto = function(x, y) {
        return function(player) {
          return {
            command: aStar(x, y, player.x, player.y),
            player: {
              x: x,
              y: y
            }
          };
        };
      };
      try {
        env = new aoscript.Environment(null);
        env.addUserType('Item', []);
        env.addUserType('Command', ['Go', 'Unlock', 'InvokeItems', 'AddItem']);
        env.addUserType('Direction', ['Up', 'Down', 'Right', 'Left']);
        aoscript["eval"](code, env);
        if (!(getCommands = env.getValue('getCommands'))) {
          throw 'getCommands must be defined at code';
        }
        args = [aoscript.Tuple.fromObject([game.player.x, game.player.y]), aoscript.Tuple.fromObject([game.goal.x, game.goal.y])];
        commands = aoscript.applyFunction(getCommands, args).toArray().map(function(v) {
          return v.toObject();
        });
        return updateRestCommands(commands);
      } catch (error) {
        e = error;
        showAOError(e);
      }
    };
    $('#run-btn').click(function() {
      code = editor.getValue();
      localStorage.setItem('code', code);
      if (!firstRun) {
        game.setupStage(game.currentStageIndex);
      } else {
        firstRun = false;
      }
      clearAlerts();
      return executeCode();
    });
    prevShowTooltip = false;
    showTooltip = false;
    draw = function(ctx) {
      var item, k, l, left, len, m, pdir, ref1, ref2, ref3, ref4, top, wall, x, y;
      for (y = k = 0, ref1 = game.field.length; 0 <= ref1 ? k < ref1 : k > ref1; y = 0 <= ref1 ? ++k : --k) {
        for (x = l = 0, ref2 = game.field[y].length; 0 <= ref2 ? l < ref2 : l > ref2; x = 0 <= ref2 ? ++l : --l) {
          ctx.drawImage(assets.images['field'], 16 * 5, 0, 16, 16, x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE);
          switch (game.field[y][x].type) {
            case 'goal':
              ref3 = game.isFinalStage() ? [16 * 9, 16] : [16 * 14, 0], left = ref3[0], top = ref3[1];
              ctx.drawImage(assets.images['field'], left, top, 16, 16, x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE);
              break;
            case 'wall':
              wall = game.isInField(x, y + 1) && game.field[y + 1][x].type !== 'wall' ? game.field[y][x].condition != null ? 10 : 4 : 3;
              ctx.drawImage(assets.images['field'], 16 * wall, 0, 16, 16, x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE);
          }
        }
      }
      pdir = {
        Up: 3,
        Down: 0,
        Right: 2,
        Left: 1
      }[game.player.direction.name];
      ctx.drawImage(assets.images['player'], 0, pdir * 32, 32, 32, game.player.x * CELL_SIZE, game.player.y * CELL_SIZE, CELL_SIZE, CELL_SIZE);
      ref4 = game.field.items;
      for (m = 0, len = ref4.length; m < len; m++) {
        item = ref4[m];
        x = item.x * CELL_SIZE + 8;
        y = item.y * CELL_SIZE + 8;
        ctx.drawImage(assets.images['item'], 16 * 1, 16 * 2, 16, 16, x, y, CELL_SIZE / 2, CELL_SIZE / 2);
      }
      return (function() {
        var $tooltip, cell, rect, ref5, tooltipText;
        x = Math.floor(mouse.x / CELL_SIZE);
        y = Math.floor(mouse.y / CELL_SIZE);
        tooltipText = null;
        if (game.isInField(x, y)) {
          cell = game.field[y][x];
          tooltipText = (ref5 = cell.condition) != null ? ref5.toString() : void 0;
          if (!tooltipText) {
            tooltipText = game.field.items.filter(function(item) {
              return item.x === x && item.y === y;
            }).join("\n");
          }
          if (!tooltipText && cell.type !== 'floor') {
            tooltipText = cell.type;
          }
          if (!tooltipText && game.player.x === x && game.player.y === y) {
            tooltipText = 'プレイヤ';
          }
          if (tooltipText && cell.note) {
            tooltipText += "\n" + cell.note;
          }
        }
        prevShowTooltip = showTooltip;
        showTooltip = tooltipText ? true : false;
        if (!prevShowTooltip && showTooltip) {
          $tooltip = $('<div>').attr({
            id: 'tooltip',
            "class": 'fq-tooltip'
          });
          $('body').append($tooltip);
        }
        if (prevShowTooltip && !showTooltip) {
          $('#tooltip').remove();
        }
        if (showTooltip) {
          rect = $('#canvas').get(0).getBoundingClientRect();
          $('#tooltip').css({
            top: mouse.y + mouse.canvasRect.top + 50,
            left: mouse.x + mouse.canvasRect.left + 20
          });
          return $('#tooltip').text(("座標(" + x + ", " + y + ")\n") + tooltipText);
        }
      })();
    };
    frameCount = 0;
    $('#canvas').lightgamer({
      width: 500,
      height: 500,
      fps: 30,
      oninit: function() {},
      onframe: function(ctx) {
        var command, fileName;
        draw(ctx);
        if (frameCount % (this.fps / 2) === 0) {
          if (game.isCleared() && commands.length === 0) {
            clearAlerts();
            commands = [];
            if (game.repeat > 0) {
              game.repeat--;
              game.setupStage(game.currentStageIndex, {
                setRepeat: false
              });
              executeCode();
            } else {
              fileName = "stage" + (game.currentStageIndex + 1);
              saveFile(fileName);
              game.goToNextStage();
              localStorage.setItem('currentStage', game.currentStageIndex);
              if (game.isAllCleared()) {
                localStorage.setItem('currentStage', 0);
                $('#ending-modal').on('hidden.bs.modal', function(e) {
                  return location.reload();
                }).modal();
              } else {
                firstRun = true;
              }
            }
          }
          if (commands.length === 1) {
            appendAlert('success', 'finished executing commands!');
          }
          command = commands.shift();
          updateRestCommands(commands);
          if (command != null) {
            game.executeCommand(command);
          }
        }
        return frameCount++;
      }
    });
    $('#canvas').mousemove(function(event) {
      var rect;
      rect = event.target.getBoundingClientRect();
      mouse.x = event.clientX - rect.left;
      mouse.y = event.clientY - rect.top;
      return mouse.canvasRect = rect;
    });
    $('#save-btn').click(function() {
      var fileName;
      fileName = $('#file-name').val();
      return saveFile(fileName);
    });
    $('#load-btn').click(function() {
      return editor.setValue(localStorage.getItem("file-" + ($('#file-list').val())));
    });
    return $('#reset-btn').click(function() {
      localStorage.removeItem('currentStage');
      return location.reload();
    });
  };

  window.onerror = function() {
    return $('#sorry-modal').on('hidden.bs.modal', function(e) {
      return location.reload();
    }).modal();
  };

  $(function() {
    assets.loadImages(onimageload);
    marked.setOptions({
      highlight: function(code) {
        return hljs.highlightAuto(code).value;
      }
    });
    return $('.markdown-text').each(function() {
      var html;
      html = marked($(this).html().replace(/&gt;/g, '>'));
      return $(this).html(html);
    });
  });

}).call(this);
